import tkinter as tk
from tkinter import ttk, filedialog
from tkcalendar import DateEntry
import pandas as pd

def submit_form(cal_date_of_birth, gender_var, state_var, city_var, country_var):
    # Retrieve data from the form fields
    customer_name = entries['Customer Name'].get()
    date_of_birth = cal_date_of_birth.get()
    customer_phone = entries['Customer Phone Number'].get()
    gender = gender_var.get()
    customer_id = entries['Customer ID'].get()
    email_id = entries['Email ID'].get()
    branch_name = entries['Branch Name'].get()  
    card_number = entries['Card Number'].get()
    address = entries['Address'].get()
    state = state_var.get()
    city = city_var.get()
    country = country_var.get()

    # Print the retrieved data
    print("Customer Name:", customer_name)
    print("Date of Birth:", date_of_birth)
    print("Customer Phone Number:", customer_phone)
    print("Gender:", gender)
    print("Customer ID:", customer_id)
    print("Email ID:", email_id)
    print("Branch Name:", branch_name)
    print("Card Number:", card_number)
    print("Address:", address)
    print("State:", state)
    print("City:", city)
    print("Country:", country)

    # Display the customer output data in the treeview
    tree.insert('', 'end', values=(customer_name, date_of_birth, customer_phone, gender, customer_id, email_id, branch_name, card_number, address, state, city, country))

def export_to_excel():
    # Retrieve data from the treeview
    data = []
    for item in tree.get_children():
        values = tree.item(item, 'values')
        data.append(values)

    # Create a DataFrame
    df = pd.DataFrame(data, columns=labels)

    # Ask user for file name and location
    file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")])

    # Export DataFrame to Excel
    if file_path:
        df.to_excel(file_path, index=False)
        print("Data exported to", file_path)

def delete_customer():
    # Get the selected item from the treeview
    selected_item = tree.selection()
    # Delete the selected item from the treeview
    for item in selected_item:
        tree.delete(item)

def delete_form():
    # Clear all form fields
    for entry in entries.values():
        if isinstance(entry, tk.Entry):
            entry.delete(0, tk.END)
        elif isinstance(entry, tk.StringVar):
            entry.set('')

root = tk.Tk()
root.title("Customer Form")

# Function to center the window on the screen
def center_window(window, width, height):
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    x_coordinate = (screen_width - width) // 2
    y_coordinate = (screen_height - height) // 2

    window.geometry(f"{width}x{height}+{x_coordinate}+{y_coordinate}")

# Configure row and column weights to expand with window size
for i in range(30):
    root.grid_rowconfigure(i, weight=1)
    root.grid_columnconfigure(0, weight=1)
    root.grid_columnconfigure(1, weight=1)

labels = ['Customer Name', 'Date of Birth', 'Customer Phone Number', 'Gender', 'Customer ID', 'Email ID', 
          'Branch Name', 'Card Number', 'Address', 'State', 'City', 'Country']

# Create labels and entry fields for each form field
entries = {}
for i, label in enumerate(labels):
    tk.Label(root, text=label, anchor='e', width=20).grid(row=i, column=0, sticky=tk.E, padx=5, pady=5)
    if label == 'Gender':
        gender_var = tk.StringVar(root)
        gender_var.set('Male')
        gender_menu = ttk.OptionMenu(root, gender_var, 'Male', 'Male', 'Female', 'Other')
        gender_menu.grid(row=i, column=1, sticky=tk.EW, padx=5, pady=5)
        entries[label] = gender_var
    elif label == 'Date of Birth':
        cal_date_of_birth = DateEntry(root)
        cal_date_of_birth.grid(row=i, column=1, sticky=tk.EW, padx=5, pady=5)
        entries[label] = cal_date_of_birth
    elif label in ['Country', 'State', 'City']:
        # Example option values
        if label == 'Country':
            option_values = ['Bangladesh', 'United Kingdom']
        elif label == 'State':
            option_values = ['Dhaka', 'London', 'Scotland', 'Wales', 'North Ireland']
        elif label == 'City':
            option_values = ["Dhaka", "Chittagong", "Rajshahi", "Khulna", "Barisal", "Sylhet", "Rangpur", "Mymensingh", "Cwmbran", "South Wales", "Birmingham"]
        
        # Create and set the option menu
        var = tk.StringVar(root)
        var.set(option_values[0])  # Default value
        option_menu = ttk.OptionMenu(root, var, *option_values)
        option_menu.grid(row=i, column=1, sticky=tk.EW, padx=5, pady=5)
        entries[label] = var
    elif label == 'Email ID':
        entry = tk.Entry(root)
        entry.grid(row=i, column=1, sticky=tk.EW, padx=5, pady=5)
        entries[label] = entry
    else:
        entry = tk.Entry(root)
        entry.grid(row=i, column=1, sticky=tk.EW, padx=5, pady=5)
        entries[label] = entry


submit_button = tk.Button(root, text="Submit", command=lambda: submit_form(entries['Date of Birth'], entries['Gender'], entries['State'], entries['City'], entries['Country']), width=15, font=('Arial', 12, 'bold'), padx=10, pady=5, bg='sky blue', fg='white')
submit_button.grid(row=len(labels)+1, column=0, sticky=tk.EW, padx=5, pady=10)

reset_button = tk.Button(root, text="Reset", command=delete_form, width=15, font=('Arial', 12, 'bold'), padx=10, pady=5, bg='grey', fg='white')
reset_button.grid(row=len(labels)+1, column=1, sticky=tk.EW, padx=5, pady=10)


tree = ttk.Treeview(root, columns=labels, show='headings')
for col in labels:
    tree.heading(col, text=col)
tree.grid(row=len(labels)+2, column=0, columnspan=2, padx=5, pady=5, sticky=tk.NSEW)

root.update_idletasks()  
center_window(root, root.winfo_width(), root.winfo_height())

delete_customer_button = tk.Button(root, text="Delete Customer", command=delete_customer, width=15, font=('Arial', 12, 'bold'), padx=10, pady=5, bg='orange', fg='white')
delete_customer_button.grid(row=len(labels)+3, column=0, columnspan=2, sticky=tk.EW, padx=5, pady=10)

export_button = tk.Button(root, text="Export", command=export_to_excel, width=15, font=('Arial', 12, 'bold'), padx=10, pady=5, bg='green', fg='white')
export_button.grid(row=len(labels)+4, column=0, columnspan=2, sticky=tk.EW, padx=5, pady=10)

root.mainloop()
